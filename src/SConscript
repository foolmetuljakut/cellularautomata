import os

Import('env')

# copy parent environment so our alterations don't affect it
env = env.Clone()

source_dir = os.path.join("..", "src")

def glob_source_files(dir_name="."):
	globStr=f"{dir_name}/*.*pp"
	file_list = [file.__str__() for file in Glob(globStr)]
	file_list_relative_paths = ["../" + path[(len(env.fs.pathTop)+1):] for path in file_list]
	return file_list_relative_paths

def all_sources_from_dir(start_dir, exclude_main_cpp = False):
	matches = []

	def add_files_filtered(dir):
		globbed_files = [file for file in glob_source_files(dir) if not file in matches]

		for file in globbed_files:
			if (exclude_main_cpp and not "main.cpp" in file) or not exclude_main_cpp:
				matches.append(file)

	for root, dirnames, _ in os.walk(start_dir):
		add_files_filtered(root)
		for dirname in dirnames:
			dirPath = os.path.join(root, dirname)
			env.Append(CPPPATH=[dirPath])
			add_files_filtered(dirPath)

	return matches

# initilize the set of targets to build
matches = all_sources_from_dir(source_dir)

# build a program # shared library
env.Program('../bin/cellularautomata', [File(file) for file in matches])